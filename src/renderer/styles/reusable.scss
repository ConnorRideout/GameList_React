@use 'variables';


@mixin fade-in($duration) {
  animation: fadeIn $duration ease-in forwards;

  @keyframes fadeIn {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
}

.header-max {
  font-size: variables.$fontMax;
  font-weight: bold;
}

.header {
  font-size: variables.$fontHeader;
}

div.tooltip {
  width: variables.$tooltipWidth;
  background: variables.$bgDark;
  color: variables.$fgHighlightedText;
  text-align: start;
  padding: 5px;
  z-index: 1000;
}

div.tooltip-image {
  max-width: 77vw;
  max-height: calc(100vh - variables.$spacing);
  width: max-content;
  padding: variables.$spacing variables.$spacing 0 variables.$spacing;

  img {
    padding: 0;
    width: 100%;
    max-height: 70vh;
  }
}

.container-centered {
  justify-content: center;
  align-items: center;
}

.horizontal-container {
  display: flex;
  flex-direction: row;

  &.center {
    justify-content: center;
  }

  &.align-center {
    align-items: center;
  }

  &.scrollable {
    overflow-y: auto
  }
}

.vertical-container {
  display: flex;
  flex-direction: column;

  &.center {
    justify-content: center;
  }

  &.align-center {
    align-items: center;
  }

  &.scrollable {
    overflow-y: auto;
  }
}

.main-container {
  @extend .vertical-container;
  align-items: center;
  max-height: calc(100vh - 2 * variables.$spacing);
  min-height: calc(100vh - 2 * variables.$spacing);
  min-width: calc(100vw - 2 * variables.$spacing);
  z-index: 1;
}

.grow-1 {
  flex-grow: 1;
}

.grow-2 {
  flex-grow: 2;
}

.grow-3 {
  flex-grow: 3;
}

.loading {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  z-index: 100;
  background: #00000044;

  &::after {
    content: '';
    position: absolute;
    top: calc(50% - 25px);
    left: calc(50% - 25px);
    width: 50px;
    height: 50px;
    border: 7px solid white;
    border-bottom-color: transparent;
    border-radius: 50%;
    display: inline-block;
    animation: rotation 1s ease infinite;
  }
}

@keyframes rotation {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

.error {
  color: variables.$fgError;
}

.updated {
  color: variables.$fgUpdated;
}

.error-container {
  @extend .horizontal-container;
  @extend .container-centered;
  @extend .flash-twice-invert;

  background-color: variables.$bgDark;
  width: 100%;
  z-index: 5;
}

.flash-once {
  animation: flashTransparent 300ms ease-in-out forwards;
}

.flash-twice {
  animation: flashTransparent 200ms ease-in-out forwards 2;
}

.flash-twice-invert {
  animation: flashInvert 200ms ease-in-out forwards 2;
}

@keyframes flashTransparent {

  0%,
  100% {
    background-color: transparent;
  }

  50% {
    background-color: white;
  }
}

@keyframes flashInvert {

  0%,
  100% {
    filter: none;
  }

  50% {
    background-color: variables.$bgNormal;
    filter: invert(1);
  }
}

.dimming-overlay {
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  z-index: 1000;
  background-color: rgba(0, 0, 0, 0.5);

  @include fade-in(100ms);
}

.inputbox-container {
  // background overlay
  @extend .vertical-container;
  @extend .dimming-overlay;

  justify-content: center;
  align-items: center;

  @include fade-in(200ms);

  div.inputbox {
    // the input box
    @extend .vertical-container;

    position: relative;
    border: 2px ridge variables.$fgNormal;
    background-color: variables.$bgNormal;
    padding: variables.$spacing calc(variables.$spacing * 3);
    min-height: 300px;
    max-height: 60vh;
    min-width: 400px;
    max-width: 70vw;

    h1 {
      // the title
      align-self: center;
      min-width: 75%;
      padding-bottom: calc(variables.$spacing * 2);
      border-bottom: 1px solid variables.$fgDark;
      margin-bottom: calc(variables.$spacing * 2);
      text-align: center;
    }

    div.inputbox-content {
      // the content box
      @extend .vertical-container;

      flex-grow: 1;
      margin: 0 15px 0 5px;
      padding: 0 5px;
      max-width: 100%;
      max-height: 100%;
      overflow: auto;
    }

    div.inputbox-buttons {
      @extend .horizontal-container;

      margin-top: calc(variables.$spacing * 2);
      border-top: 1px solid variables.$fgDark;
      padding: calc(variables.$spacing * 2) 0;
      min-width: 75%;
      width: fit-content;
      align-self: center;
      justify-content: space-evenly;
      align-items: center;
    }
  }
}

.svg-button {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 0 variables.$spacing;
  min-width: 60px;
  height: min-content;
  margin: 0 variables.$spacing;

  &.with-margin {
    margin: variables.$spacing calc(variables.$spacing * 2);
  }
}

.grid-column-1 {
  grid-column: 1;
}

.grid-column-2 {
  grid-column: 2;
}

.grid-column-3 {
  grid-column: 3;
}

.grid-column-4 {
  grid-column: 4;
}

.grid-column-span-2 {
  grid-column-end: span 2;
}

.grid-column-span-3 {
  grid-column-end: span 3;
}

.grid-row-1 {
  grid-row: 1;
}

.grid-row-2 {
  grid-row: 2;
}

.grid-row-3 {
  grid-row: 3;
}

.grid-row-4 {
  grid-row: 4;
}

.grid-row-5 {
  grid-row: 5;
}

.grid-row-6 {
  grid-row: 6;
}

.grid-row-7 {
  grid-row: 7;
}

.grid-row-span-2 {
  grid-row-end: span 2;
}

.grid-row-span-4 {
  grid-row-end: span 4;
}